{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/adv-form/adv-form.component.css","webpack:///./src/app/adv-form/adv-form.component.html","webpack:///./src/app/adv-form/adv-form.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/basic-form/basic-form.component.css","webpack:///./src/app/basic-form/basic-form.component.html","webpack:///./src/app/basic-form/basic-form.component.ts","webpack:///./src/app/model/user.ts","webpack:///./src/app/report/report.component.css","webpack:///./src/app/report/report.component.html","webpack:///./src/app/report/report.component.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"custRow row\\\">\\n  <br>\\n</div>\\n\\n<div class=\\\"custRow row\\\">\\n  <div class=\\\"col-md-2 col-xs-2 col-lg-2\\\">\\n    <span></span>\\n  </div>\\n\\n  <div class=\\\"col-md-8 col-xs-8 col-lg-8\\\">\\n\\n    <form novalidate (ngSubmit)=\\\"onFormSubmit(adv)\\\" #adv=\\\"ngForm\\\">\\n\\n      <div class=\\\"container\\\">\\n        <div style=\\\"text-align:center;\\\">\\n          <h1>Booking Information</h1>\\n          <p>Please fill in this form</p>\\n        </div>\\n        <hr>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"fromPlace\\\">\\n            <b>Where from?</b>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.fromPlace\\\" name=\\\"fromPlace\\\" #fromPlace=\\\"ngModel\\\" id=\\\"inputfromPlace\\\"\\n            placeholder=\\\"Where from?\\\" required>\\n        </div>\\n        <!-- fromPlace error block -->\\n        <div *ngIf=\\\"(fromPlace.invalid && ( fromPlace.touched || fromPlace.dirty) ) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n          <div *ngIf=\\\"fromPlace.errors?.required\\\">\\n            Please enter the From Place\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"toPlace\\\">\\n            <b>Where to?</b>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.toPlace\\\" name=\\\"toPlace\\\" #toPlace=\\\"ngModel\\\" id=\\\"inputtoPlace\\\" placeholder=\\\"Where to?\\\"\\n            required>\\n        </div>\\n        <!-- toPlace error block -->\\n        <div *ngIf=\\\"(toPlace.invalid && ( toPlace.touched || toPlace.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n          <div *ngIf=\\\"toPlace.errors?.required\\\">\\n            Please enter the To Place\\n          </div>\\n        </div>\\n\\n        <!-- Select Date of Birth block -->\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"startDate\\\">\\n            <b>Departure date</b>\\n          </label>\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.startDate\\\" name=\\\"startDate\\\" #startDate=\\\"ngModel\\\" id=\\\"inputstartDate\\\"\\n            placeholder=\\\"Select Departure date\\\" required>\\n        </div>\\n        <!-- startDate error block -->\\n        <div *ngIf=\\\"(startDate.invalid && ( startDate.touched || startDate.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n          <div *ngIf=\\\"startDate.errors?.required\\\">\\n            Please enter the Departure date\\n          </div>\\n        </div>\\n\\n        <!-- Select Date of Birth block -->\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"endDate\\\">\\n            <b>Return date</b>\\n          </label>\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.endDate\\\" name=\\\"endDate\\\" #endDate=\\\"ngModel\\\" id=\\\"inputendDate\\\" placeholder=\\\"Select Departure date\\\"\\n            required>\\n        </div>\\n        <!-- endDate error block -->\\n        <div *ngIf=\\\"(endDate.invalid && ( endDate.touched || endDate.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n          <div *ngIf=\\\"endDate.errors?.required\\\">\\n            Please enter the Return date\\n          </div>\\n        </div>\\n\\n        <br>\\n        <!-- <div class=\\\"progress form-group col-lg-6\\\">\\n          <div class=\\\"progress-bar bg-success col-lg-6\\\" role=\\\"progressbar\\\" style=\\\"width: 50%\\\" aria-valuenow=\\\"50\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">50%</div>\\n        </div> -->\\n        <div class=\\\"clearfix\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" style=\\\"float: right;\\\"> Submit\\n          </button>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n\\n  \\n\\n  <div class=\\\"col-md-2 col-xs-2 col-lg-2\\\">\\n    <span></span>\\n  </div>\\n</div>\\n\\n<div class=\\\"custRow row\\\">\\n  <br>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../model/user';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-adv-form',\n  templateUrl: './adv-form.component.html',\n  styleUrls: ['./adv-form.component.css']\n})\nexport class AdvFormComponent implements OnInit {\n\n  user: User;\n  // enthinicity: any[];\n  isSubmitted = false;\n\n  constructor(private router: Router) { \n    // this.enthinicity = [\"Asian\", \"American Indian\", \"African American\"]\n    this.user = new User;\n  }\n\n  ngOnInit() {\n  }\n\n  onFormSubmit({ value, valid }: { value: User, valid: boolean }) {\n    this.isSubmitted = true\n    this.user = value;\n    // console.log(this.user);\n    // console.log('valid: ' + valid);\n    if (valid) {\n      this.user = value;\n      console.log(this.user);\n      console.log('valid: ' + valid);\n      this.router.navigate(['/report'])\n      // this.dataService.saveUser(this.user)\n      //   .subscribe((data) => {\n      //     console.log(data)\n      //     console.log(\"success\")\n      //     this.router.navigate(['/users'])\n      //   },\n      //     error => {\n      //       console.log(\"Error Occured\")\n      //     });\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BasicFormComponent } from './basic-form/basic-form.component';\nimport { AdvFormComponent } from './adv-form/adv-form.component';\nimport { ReportComponent } from './report/report.component';\n\nconst routes: Routes = [\n  {path: \"basic\", component: BasicFormComponent},\n  {path: \"adv\", component: AdvFormComponent},\n  {path: \"report/:id\", component: ReportComponent},\n  {path: \"\", redirectTo: \"/basic\", pathMatch: \"full\"}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"/* row */\\r\\n/* .custRow {\\r\\n    margin-left: 0em;\\r\\n    margin-right: 0em;\\r\\n} */\"","module.exports = \"<div class=\\\"container\\\">\\n<router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BasicFormComponent } from './basic-form/basic-form.component';\nimport { AdvFormComponent } from './adv-form/adv-form.component';\nimport { ReportComponent } from './report/report.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BasicFormComponent,\n    AdvFormComponent,\n    ReportComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"row justify-content-md-center\\\">\\n\\n  <div class=\\\"col-sm-8\\\">\\n    <div [ngSwitch]=\\\"step\\\">\\n      <div *ngSwitchCase=\\\"1\\\">\\n        <!-- Form step 1 -->\\n        <form novalidate (ngSubmit)=\\\"onFormNext(basic)\\\" #basic=\\\"ngForm\\\">\\n\\n          <div style=\\\"text-align:center;\\\">\\n            <h1>Personal Information</h1>\\n            <p>Please fill in this form</p>\\n          </div>\\n          <hr>\\n\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"firstName\\\">\\n              <b>First Name</b>\\n            </label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.firstName\\\" name=\\\"firstName\\\" #firstName=\\\"ngModel\\\" id=\\\"inputfirstName\\\"\\n              placeholder=\\\"First Name\\\" required>\\n          </div>\\n          <!-- firstName error block -->\\n          <div *ngIf=\\\"(firstName.invalid && ( firstName.touched || firstName.dirty) ) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"firstName.errors?.required\\\">\\n              Please enter the firstname\\n            </div>\\n          </div>\\n\\n\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"lastName\\\">\\n              <b>Last Name</b>\\n            </label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.lastName\\\" name=\\\"lastName\\\" #lastName=\\\"ngModel\\\" id=\\\"inputlastName\\\"\\n              placeholder=\\\"Last Name\\\" required>\\n          </div>\\n          <!-- lastName error block -->\\n          <div *ngIf=\\\"(lastName.invalid && ( lastName.touched || lastName.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"lastName.errors?.required\\\">\\n              Please enter the lastname\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"email\\\">\\n              <b>Email</b>\\n            </label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\" id=\\\"inputEmail\\\" placeholder=\\\"Email\\\"\\n              pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required>\\n          </div>\\n          <!-- Email error block -->\\n          <div *ngIf=\\\"(email.invalid && ( email.touched || email.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"email.errors?.required\\\">\\n              Please enter the email id\\n            </div>\\n            <div *ngIf=\\\"email.errors?.pattern &&  email.dirty\\\">\\n              Please enter the valid email id\\n            </div>\\n          </div>\\n\\n          <!-- Select Gender block -->\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"gender\\\">\\n              <b>Gender</b>\\n            </label>\\n            <select id=\\\"select\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.gender\\\" name=\\\"gender\\\" required>\\n              <option *ngFor=\\\"let g of gender\\\" [value]=\\\"g\\\"> {{g}}\\n              </option>\\n            </select>\\n          </div>\\n\\n          <!-- Select Date of Birth block -->\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"dob\\\">\\n              <b>Date of Birth</b>\\n            </label>\\n            <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.dob\\\" name=\\\"dob\\\" #dob=\\\"ngModel\\\" id=\\\"inputdob\\\" placeholder=\\\"Select date\\\"\\n              required>\\n          </div>\\n          <!-- dob error block -->\\n          <div *ngIf=\\\"(dob.invalid && ( dob.touched || dob.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"dob.errors?.required\\\">\\n              Please enter the Date of Birth\\n            </div>\\n          </div>\\n\\n          <!-- Select status block -->\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"prom\\\">\\n              <b>Like to recive promotion</b>\\n            </label>\\n            <br>\\n            <div class=\\\"form-check form-check-inline\\\">\\n              <label>\\n                <input type=\\\"radio\\\" value=\\\"yes\\\" name=\\\"prom\\\" [ngModel]=\\\"user.prom\\\" #prom=\\\"ngModel\\\" id=\\\"inputprom\\\"> Yes\\n              </label>\\n            </div>\\n            <div class=\\\"form-check form-check-inline\\\">\\n              <label>\\n                <input type=\\\"radio\\\" value=\\\"no\\\" name=\\\"prom\\\" [ngModel]=\\\"user.prom\\\" #prom=\\\"ngModel\\\" id=\\\"inputprom\\\"> No\\n              </label>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-check\\\">\\n            <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" #agree=\\\"ngModel\\\" value=\\\"true\\\" id=\\\"agree\\\" [ngModel]=\\\"user.agree\\\" id=\\\"inputagree\\\" name=\\\"agree\\\" required>\\n            <label class=\\\"form-check-label\\\" for=\\\"agree\\\">\\n              I agree to the Terms and Conditions\\n            </label> \\n          </div>\\n          <div *ngIf=\\\"(agree.invalid && ( agree.touched || agree.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n              <div *ngIf=\\\"agree.errors?.required\\\">\\n                Please Agree to the terms and Conditions\\n              </div>\\n            </div>\\n\\n          <br>\\n\\n          <div class=\\\"clearfix\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" style=\\\"float: right;\\\"> Next\\n            </button>\\n          </div>\\n\\n        </form>\\n      </div>\\n      <div *ngSwitchCase=\\\"2\\\">\\n        <!-- Form step 2 -->\\n        <form novalidate (ngSubmit)=\\\"onFormSubmit(basic)\\\" #basic=\\\"ngForm\\\">\\n\\n\\n          <div style=\\\"text-align:center;\\\">\\n            <h1>Booking Information</h1>\\n            <p>Please fill in this form</p>\\n          </div>\\n          <hr>\\n\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"fromPlace\\\">\\n              <b>Where from?</b>\\n            </label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.fromPlace\\\" name=\\\"fromPlace\\\" #fromPlace=\\\"ngModel\\\" id=\\\"inputfromPlace\\\"\\n              placeholder=\\\"Where from?\\\" required>\\n          </div>\\n          <!-- fromPlace error block -->\\n          <div *ngIf=\\\"(fromPlace.invalid && ( fromPlace.touched || fromPlace.dirty) ) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"fromPlace.errors?.required\\\">\\n              Please enter the From Place\\n            </div>\\n          </div>\\n\\n\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"toPlace\\\">\\n              <b>Where to?</b>\\n            </label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.toPlace\\\" name=\\\"toPlace\\\" #toPlace=\\\"ngModel\\\" id=\\\"inputtoPlace\\\" placeholder=\\\"Where to?\\\"\\n              required>\\n          </div>\\n          <!-- toPlace error block -->\\n          <div *ngIf=\\\"(toPlace.invalid && ( toPlace.touched || toPlace.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"toPlace.errors?.required\\\">\\n              Please enter the To Place\\n            </div>\\n          </div>\\n\\n          <!-- Select Date of Birth block -->\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"startDate\\\">\\n              <b>Departure date</b>\\n            </label>\\n            <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.startDate\\\" name=\\\"startDate\\\" #startDate=\\\"ngModel\\\" id=\\\"inputstartDate\\\"\\n              placeholder=\\\"Select Departure date\\\" required>\\n          </div>\\n          <!-- startDate error block -->\\n          <div *ngIf=\\\"(startDate.invalid && ( startDate.touched || startDate.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"startDate.errors?.required\\\">\\n              Please enter the Departure date\\n            </div>\\n          </div>\\n\\n          <!-- Select Date of Birth block -->\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"endDate\\\">\\n              <b>Return date</b>\\n            </label>\\n            <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.endDate\\\" name=\\\"endDate\\\" #endDate=\\\"ngModel\\\" id=\\\"inputendDate\\\" placeholder=\\\"Select Departure date\\\"\\n              required>\\n          </div>\\n          <!-- endDate error block -->\\n          <div *ngIf=\\\"(endDate.invalid && ( endDate.touched || endDate.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n            <div *ngIf=\\\"endDate.errors?.required\\\">\\n              Please enter the Return date\\n            </div>\\n          </div>\\n\\n          <br>\\n          <!-- <div class=\\\"progress form-group col-lg-6\\\">\\n                    <div class=\\\"progress-bar bg-success col-lg-6\\\" role=\\\"progressbar\\\" style=\\\"width: 50%\\\" aria-valuenow=\\\"50\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">50%</div>\\n                  </div> -->\\n          <div class=\\\"clearfix\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" style=\\\"float: right;\\\"> Submit\\n            </button>\\n          </div>\\n\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../model/user';\nimport { Router } from '@angular/router';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-basic-form',\n  templateUrl: './basic-form.component.html',\n  styleUrls: ['./basic-form.component.css']\n})\nexport class BasicFormComponent implements OnInit {\n  user: User;\n  isSubmitted = false;\n  gender = [\"Select Gender\", \"Male\", \"Female\", \"Other\"];\n  step: string;\n\n  constructor(private router: Router, private dataService: DataService) {\n    this.user = new User;\n    this.user.gender = this.gender[0];\n    this.step = \"1\";\n  }\n\n  ngOnInit() {\n  }\n\n  onFormNext({ value, valid }: { value: User, valid: boolean }) {\n    this.isSubmitted = true;\n    this.step = \"2\";\n    this.user = value;\n    \n  }\n\n  onFormSubmit({ value, valid }: { value: User, valid: boolean }) {\n    this.isSubmitted = true\n    console.log(value)\n    // console.log(this.user);\n    // console.log('valid: ' + valid);\n    if (valid) {\n      this.user.endDate = value.endDate;\n    this.user.startDate = value.startDate;\n    this.user.toPlace = value.toPlace;\n    this.user.fromPlace = value.fromPlace;\n      console.log(this.user);\n      console.log('valid: ' + valid);\n      \n      this.dataService.addUser(this.user)\n        .subscribe((data :any) => {\n          console.log(data)\n          \n          console.log(\"success\")\n          this.router.navigate(['/report/'+ data.id])\n        },\n          error => {\n            console.log(\"Error Occured\")\n          });\n    }\n  }\n}\n","export class User {\n        firstName:  string;\n        lastName: string;\n        gender:   string;\n        dob: Date;\n        email: string;\n        startDate: Date;\n        endDate: Date;\n        ethnicity: string;\n        fromPlace: string;\n        toPlace: string;\n\n        constructor(values: Object = {}) {\n            /*Constructor initialization*/\n            Object.assign(this, values);\n        }\n    }\n\n    \n","module.exports = \"\"","module.exports = \"<p>\\n  report works!\\n</p>\\n\\n{{reportObj | json}}\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-report',\n  templateUrl: './report.component.html',\n  styleUrls: ['./report.component.css']\n})\nexport class ReportComponent implements OnInit {\n\n  id: any;\n  reportObj: any\n  constructor(private route: ActivatedRoute, private dataService: DataService) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = params[\"id\"];\n      this.dataService.getUserList(this.id)\n        .subscribe((data) => {\n          console.log(data)\n          this.reportObj = data\n        },\n          err => {\n\n          })\n    },\n      err => {\n\n      }\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  addUser(item){\n    return this.http.post(\"https://registration-form-demo1.herokuapp.com/saveUser\", item)\n  }\n\n  getUserList(id){\n    return this.http.get(\"https://registration-form-demo1.herokuapp.com/getUserList/\"+ id)\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}